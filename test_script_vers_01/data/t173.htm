






<div class="mailru-visibility-check"> <span class="mailru-visibility-check-counter" data-counter="https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qMgXDj6xAAAAmlN_8GP4CLo3KmRYcA6cyzHGNR43vVrkUr69QvBFJBP6qh_P7wQN1XMTKFc3vxeBSd-lyjNW2SOwC7wIdGz2aNAAT1XlcvqYsq07TlzSIT6Cf99rj0lqgrwnhLdplfEAuhLz3Rv25_PDw5nG6wHGGrvPQFMC6pQQ6ZrisNOz5-kISRVDiw16IUor9ueH1evVtswJf8lwa-6kCwZO27xh7gZCSFoLEi6nh6QdqbFfY8WXly_8P-5eb7Joz0G6PK6L.gif" style="display:none"></span> <img src="https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qHGJIAGuAAAArA-U-ygdMu1gg1aIXhdKdXvTLPF47YpzkdfwT60SayOEi5xwYdQHT0LvsqfxHmCWk4KtPCCnai3Yv_CPQ7jb--cvAMBvVQUcqv8CWqGvERhtFWmBDHUPdNOSdWoYKdK3ZJy7GarVcHaoUU0STS0AHGMvNUFzJHeTB-Ae9_djWFDcBXaFqF4Yp8fluGE4wcfAEMsf8LZ6sI8pTkNwDDEf-Ulnr1S3BYNt5CpAl8GL4Bo.gif" style="width:0;height:0;position:absolute;visibility:hidden;" alt=""/>


<!-- t1  -->
<!-- t2  -->
<!-- t3 0 -->
<!-- aw  -->













    
    
    
    
    
    


    
    








<!-- 6477 -->
    
    
    <!-- marketing -->
        

        
        <div id="trg-b-119817434-264384324" data-hide-264384324="hide-banner" style="display:block; ">
        
        
        
        </div>
        
<script>
  try{
    (function (w, d, prefix) {
    w.RB = w.RB && w.RB.v && w.RB.v === 1 ? w.RB : (function () {
      var // main flag,
        enabled = !1,
        servingType = serveType(),
        useObserver = !!window.IntersectionObserver,
        useGeom = !useObserver && servingType !== "XD_FRAME",
        // old opera focus flag
        focused = !0,
        // counted flag
        counted = "mailru-visibility-counted",
        // banners to inspect
        banners = {},
        // shortcuts
        e = d.documentElement,
        VE = d.mozVisibilityState ? "mozvisibilitychange" : d.webkitVisibilityState ? "webkitvisibilitychange" : d.visibilityState ? "visibilitychange" : "",
        HP = "hidden" in d ? "hidden" : "webkitHidden" in d ? "webkitHidden" : "mozHidden" in d ? "mozHidden" : "",
        // lastTimeStamp = 0,

        // timing
        tm,
        // interstion observer instance
        observer;

      // handlers
      function onFocusIn() {
        focused = !0;
        C(!0);
      }

      function onFocusOut() {
        focused = !1;
      }

      function onUnload() {
        Clear();
        off();
      }

      // using visibility could have profits when tab is not

      function onVisibilityChange() {
        if (!d[HP]) onFocusIn();
        else onFocusOut();
      }

      function onWindowScroll() {
        C();
      }

      function onWindowResize() {
        C();
      }

      // I &ndash; inspect

      function I(bannerObject, id) {
        if (Object.prototype.toString.call(bannerObject) === "[object Array]") {
          Clear(bannerObject);
          var k = bannerObject.length - 1;
          for (; k >= 0; k--) {
            if (!s(bannerObject[k].el, counted)) {
              I(bannerObject[k]);
            }
          }
          return;
        }

        if (!useObserver && !useGeom) {
          tr(bannerObject.pixels_undetermined);
          bannerObject.el[counted] = true;
          return;
        }
        // bannerObject contains bannerObject.el and bannerObject.pixels
        if (!bannerObject.el.id) {
          id =
            prefix +
            new Date().getTime() +
            Math.round(Math.random() * 1e6);
          bannerObject.el.id = id;
        }

        id = bannerObject.el.id;

        // lastTimeStamp = new Date().getTime();
        // adding the banner container to storage
        if (!banners[id]) {
          banners[id] = {
            c: bannerObject.el,
            px: bannerObject.pixels,
            px_un: bannerObject.pixels_undetermined,
            px_nv: bannerObject.pixels_nonviewable,
            cb: bannerObject.callback,
            io: useObserver
          };
        }

        // enabling anyway
        on();
        if (useObserver) {
          o(bannerObject.el);
        }
        C(!0);
      }

      // C &ndash; check viewability of banner with t, timeout after loading

      function C(t) {
        for (var id in banners) {
          if (banners[id] && !G(id)) {
            CL(id);
          } else if (
            banners[id] &&
            getVA(banners[id].c) >= 50 &&
            hasFocus() &&
            !banners[id].t
          ) {
            (function (_id) {
              banners[_id].t = setTimeout(function () {
                try {
                  P(_id);
                } catch (e) {}
              }, 1E3);
            })(id);
          } else if (
            banners[id] &&
            getVA(banners[id].c) < 50
          ) {
            if (banners[id].t) {
              clearTimeout(banners[id].t);
              delete banners[id].t;
            }
          } else if (banners[id] && !hasFocus()) {
            if (banners[id].t) {
              clearTimeout(banners[id].t);
              delete banners[id].t;
              clearTimeout(tm);
              t = false;
            }
          } else if (!banners[id]) {
            CL(id);
          }
        }

        if (t) {
          clearTimeout(tm);
          tm = setTimeout(
            function () {
              C(!0);
            },
            useGeom ? 3e2 : 10e3
          );
        }
      }

      // CL &ndash; Clear timers and stop listeners

      function CL(id, onlyTM, noCount) {
        if (id && banners[id]) {
          clearTimeout(banners[id].t);
          banners[id].t = null;
          if (!onlyTM) {
            if (banners[id].io && observer) {
              observer.unobserve(banners[id].c);
            }

            if (!noCount && !s(banners[id].c, counted)) {
              tr(banners[id].px_nv);
              banners[id].c[counted] = true;
            }
            banners[id].c = null;
            delete banners[id];
          }
          return;
        }
        clearTimeout(tm);
        tm = null;
        for (var id in banners) {
          if (banners[id].t) {
            CL(id, !0);
          }
        }
      }

      function Clear(bannersArray) {
        if (bannersArray && bannersArray.length >= 0) {
          //clear banners from array
          var k = bannersArray.length - 1;
          var id;
          for (; k >= 0; k--) {
            id = bannersArray[k].el.id;
            if (id && banners[id]) {
              // clear but don't count nonviewable
              CL(id, !1, !0);
            }
          }
        } else {
          for (var id in banners) {
            //clear all
            CL(id);
          }
        }
      }

      // P &ndash; pixel to send
      function P(id, obj, cnt) {
        if (!G(id)) {
          CL(id);
          // banner removed
          return;
        }

        if (banners[id]) {
          obj = banners[id].c;
        } else {
          return;
        }

        if (!hasFocus()) {
          CL(id, !0);
          return;
        } else if (getVA(obj) < 50) {
          CL(id, !0);
          return;
        }

        for (cnt = banners[id].px.length - 1; cnt >= 0; cnt--) {
          new Image().src = banners[id].px[cnt];
        }
        // set counted flag - skip in next collect loops
        obj[counted] = true;
        //try fire callback
        var cb = banners[id].cb;
        if (cb && typeof cb === "function") {
          try {
            cb();
          } catch (e) {}
        }
        // remove banner from storage of inspectable items
        CL(id);
        // turn listeners off if banners are not present
        if (!l(banners)) off();
      }

      function hasFocus() {
        if (HP) focused = !d[HP];
        else if (!VE && typeof d.hasFocus === "function")
          focused = d.hasFocus();
        return focused;
      }

      function getVA(obj, source) {
        if (obj.id && banners[obj.id] && banners[obj.id].io) {
          return banners[obj.id].v || 0;
        }

        var percent = getGeometryViewableArea(obj).percent;

        return percent;
      }

      /** LISTENERS SWITCHERS **/
      function on() {
        if (enabled) return;
        if (useGeom) {
          ev(w, "resize", onWindowResize);
          ev(w, "scroll", onWindowScroll);
        }
        if (useObserver) {
          observer = new IntersectionObserver(h, {
            threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
          });
        }
        if (VE) ev(d, VE, onVisibilityChange);
        else {
          ev(w, "blur", onFocusOut);
          ev(w, "focus", onFocusIn);
        }
        ev(w, "unload", onUnload);
        enabled = true;
      }

      function off() {
        rm(w, "unload", onUnload);
        rm(w, "resize", onWindowResize);
        rm(w, "scroll", onWindowScroll);
        if (VE) rm(d, VE, onVisibilityChange);
        rm(w, "focus", onFocusIn);
        rm(w, "blur", onFocusOut);
        if (observer) {
          observer.disconnect();
          observer = null;
        }
        clearTimeout(tm);
        enabled = false;
      }

      /** INTERSECTION OBSERVER UTILS **/
      function o(e) {
        observer && observer.observe(e);
      }

      function h(changes) {
        changes.forEach(function (changeRecord) {
          var element = changeRecord.target;
          var id = element.id;

          if (id && banners[id]) {
            banners[id].v = Math.round(
              changeRecord.intersectionRatio * 100
            );
          }
        });
        C();
      }

      /** UTILS **/
      // G - get element by ID;
      function G(E) {
        return d.getElementById(E);
      }
      // ev - EVent to handle
      function ev(elem, eventName, callback) {
        elem.addEventListener
          ? elem.addEventListener(eventName, callback, !1)
          : elem.attachEvent &&
            elem.attachEvent("on" + eventName, callback);
      }

      function rm(elem, eventName, callback) {
        elem.removeEventListener
          ? elem.removeEventListener(eventName, callback, !1)
          : elem.detachEvent &&
            elem.detachEvent("on" + eventName, callback);
      }
      // obj length
      function l(obj) {
        var s = 0,
          key;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) s++;
        }
        return s;
      }
      //elem state
      function s(elem, state) {
        return !(typeof elem[state] == undefined || elem[state] !== true);
      }
      //track
      function tr(pixels) {
        if (pixels && pixels.length) {
          for (cnt = pixels.length - 1; cnt >= 0; cnt--) {
            new Image().src = pixels[cnt];
          }
        }
      }
      function serveType() {
        try {
          if (window === window.top) {
            return "ON_PAGE";
          }

          var currentWindow = window;

          while (currentWindow !== currentWindow.parent) {
            if (
              currentWindow.document.domain !==
              currentWindow.parent.document.domain
            ) {
              return "XD_FRAME";
            }
            currentWindow = currentWindow.parent;
          }

          return "S_FRAME";
        } catch (e) {}

        return "XD_FRAME";
      }

      // geometry viewability
      function getGeometryViewableArea(element, contextWindow) {
        try {
          var rect = element.getBoundingClientRect();
          var area = getArea(rect);
          var currentWindow = window;

          contextWindow = contextWindow || window.top;

          while (currentWindow !== contextWindow) {
            // 1) get current frame coordinates inside its parent
            // 2) get element coordinates relative to parent
            // 3) get visible element coordinates relative to parent
            var currentRect = currentWindow.frameElement.getBoundingClientRect();

            rect = getRR(rect, currentRect);
            rect.left = Math.max(currentRect.left, rect.left);
            rect.right = Math.min(currentRect.right, rect.right);
            rect.top = Math.max(currentRect.top, rect.top);
            rect.bottom = Math.min(currentRect.bottom, rect.bottom);

            if (rect.right < rect.left) {
              rect.right = rect.left;
            }
            if (rect.bottom < rect.top) {
              rect.bottom = rect.top;
            }

            currentWindow = currentWindow.parent;
          }
          rect = getRVA(rect, contextWindow);

          var viewableArea = getArea(rect);

          rect.percent = (viewableArea / area) * 100;

          return rect;
        } catch (e) {
          return { left: 0, right: 0, top: 0, bottom: 0, percent: 0 };
        }
      }

      function getArea(rect) {
        return (rect.right - rect.left) * (rect.bottom - rect.top);
      }
      // relative rect
      function getRR(rect, contextRect) {
        return {
          left: rect.left + contextRect.left,
          right: rect.right + contextRect.left,
          top: rect.top + contextRect.top,
          bottom: rect.bottom + contextRect.top,
        };
      }
      // relative viewable area
      function getRVA(rect, contextWindow) {
        var result = {};
        var contextSize = getVS(contextWindow);

        result.left = Math.max(0, rect.left);
        result.right = Math.min(contextSize.width, rect.right);
        result.top = Math.max(0, rect.top);
        result.bottom = Math.min(contextSize.height, rect.bottom);

        return result;
      }
      // viewport size
      function getVS(w) {
        var viewPortSize = {
          width: Infinity,
          height: Infinity,
        };
        var d = w.document;

        if (!isNaN(d.body.clientWidth) && d.body.clientWidth > 0) {
          viewPortSize.width = d.body.clientWidth;
        }
        if (!isNaN(d.body.clientHeight) && d.body.clientHeight > 0) {
          viewPortSize.height = d.body.clientHeight;
        }
        if (
          !!d.documentElement &&
          !!d.documentElement.clientWidth &&
          !isNaN(d.documentElement.clientWidth)
        ) {
          viewPortSize.width = d.documentElement.clientWidth;
        }
        if (
          !!d.documentElement &&
          !!d.documentElement.clientHeight &&
          !isNaN(d.documentElement.clientHeight)
        ) {
          viewPortSize.height = d.documentElement.clientHeight;
        }
        if (!!w.innerWidth && !isNaN(w.innerWidth)) {
          viewPortSize.width = Math.min(viewPortSize.width, w.innerWidth);
        }
        if (!!w.innerHeight && !isNaN(w.innerHeight)) {
          viewPortSize.height = Math.min(
            viewPortSize.height,
            w.innerHeight
          );
        }

        return viewPortSize;
      }

      /** PUBLIC INTERFACE **/

      return {
        I: I,
        // debug
        // , banners: banners
        v: 1,
      };
    })();
  })(window, document, 'mailru')
  }catch (e) {}
</script>
  

<script>
  (function(prefix){
    try{
      
      function getAdsContainers() {
  			var ADS_CLASS = prefix + '-visibility-check',
  				ADS_COUNTER_CLASS = ADS_CLASS + '-counter',
  				ADS_CALLBACK_CLASS = ADS_CLASS + '-callback',
  				COUNTER_ATTR = 'data-counter',
  				COUNTER_ATTR_UNDETERMINED = COUNTER_ATTR + '-un',
  				COUNTER_ATTR_NONVIEWABLE = COUNTER_ATTR + '-nv',
  				CALLBACK_ATTR = 'data-callback',
  				OBSERVER_ATTR = 'data-observer',
  				containers = [],
  				countables = [],
  				i, k, counters, _counter, _observer;
   
  			containers = getByClass(document, ADS_CLASS);
  			for (i = containers.length - 1; i >= 0; i--) {
  				var counters = getByClass(containers[i], ADS_COUNTER_CLASS, 'span');
  				_counter = containers[i].getAttribute(COUNTER_ATTR);
  				_observer = containers[i].hasAttribute(OBSERVER_ATTR);
  				countables[i] = {
  					el: containers[i],
  					pixels: [],
  					pixels_undetermined: [],
  					pixels_nonviewable: [],
  					observer: _observer
  				};
  				if (_counter) countables[i].pixels.push(_counter);
  				for (k = counters.length - 1; k >= 0; k--) {
  					if (counters[k].parentNode === countables[i].el) {
              _counter = counters[k].getAttribute(COUNTER_ATTR);
              if (_counter) {
                countables[i].pixels.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_UNDETERMINED);
              if (_counter) {
                countables[i].pixels_undetermined.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_NONVIEWABLE);
              if (_counter) {
                countables[i].pixels_nonviewable.push(_counter);
              }
            }
  				}
  				var callback = getByClass(containers[i], ADS_CALLBACK_CLASS, 'span');
  				if (callback[0]) {
  				  var _callback = callback[0].getAttribute(CALLBACK_ATTR);
  				  if (_callback && window.RB_CALLBACKS && window.RB_CALLBACKS[_callback]) {
  				    countables[i].callback = window.RB_CALLBACKS[_callback];
  				  }
  				}
  				if (!countables[i].pixels.length) countables.splice(i, 1);
  			}
   
  			return countables;
  		}
   
  		function getByClass(parent, childClassName, tagName) {
  			if (parent.getElementsByClassName) {
  				return parent.getElementsByClassName(childClassName);
  			} else if (parent.querySelectorAll) {
   
  				return parent.querySelectorAll('.' + childClassName);
  			} else {
  				var els = [];
  				var tmp = parent.getElementsByTagName(tagName ? tagName : "*");
  				var regex = new RegExp("(^|\s)" + childClassName + "(\s|$)");
  				for (var i = 0; i < tmp.length; i++) {
  					if (regex.test(tmp[i].className)) {
  						els.push(tmp[i]);
  					}
  				}
  				return els;
  			}
  		}
   
  		RB.I(getAdsContainers());
      
    }catch(e){}
  }('mailru'))
</script>

    


<style>
  #trg-b-119817434-264384324[data-hide-264384324] {
    position: absolute!important;
    left: -9999px!important;
    z-index: -1!important;
    width: 100%;
  }
</style>

<script>
  try{
    (function (w, d, prefix) {
    w.RB = w.RB && w.RB.v && w.RB.v === 1 ? w.RB : (function () {
      var // main flag,
        enabled = !1,
        servingType = serveType(),
        useObserver = !!window.IntersectionObserver,
        useGeom = !useObserver && servingType !== "XD_FRAME",
        // old opera focus flag
        focused = !0,
        // counted flag
        counted = "mailru-visibility-counted",
        // banners to inspect
        banners = {},
        // shortcuts
        e = d.documentElement,
        VE = d.mozVisibilityState ? "mozvisibilitychange" : d.webkitVisibilityState ? "webkitvisibilitychange" : d.visibilityState ? "visibilitychange" : "",
        HP = "hidden" in d ? "hidden" : "webkitHidden" in d ? "webkitHidden" : "mozHidden" in d ? "mozHidden" : "",
        // lastTimeStamp = 0,

        // timing
        tm,
        // interstion observer instance
        observer;

      // handlers
      function onFocusIn() {
        focused = !0;
        C(!0);
      }

      function onFocusOut() {
        focused = !1;
      }

      function onUnload() {
        Clear();
        off();
      }

      // using visibility could have profits when tab is not

      function onVisibilityChange() {
        if (!d[HP]) onFocusIn();
        else onFocusOut();
      }

      function onWindowScroll() {
        C();
      }

      function onWindowResize() {
        C();
      }

      // I &ndash; inspect

      function I(bannerObject, id) {
        if (Object.prototype.toString.call(bannerObject) === "[object Array]") {
          Clear(bannerObject);
          var k = bannerObject.length - 1;
          for (; k >= 0; k--) {
            if (!s(bannerObject[k].el, counted)) {
              I(bannerObject[k]);
            }
          }
          return;
        }

        if (!useObserver && !useGeom) {
          tr(bannerObject.pixels_undetermined);
          bannerObject.el[counted] = true;
          return;
        }
        // bannerObject contains bannerObject.el and bannerObject.pixels
        if (!bannerObject.el.id) {
          id =
            prefix +
            new Date().getTime() +
            Math.round(Math.random() * 1e6);
          bannerObject.el.id = id;
        }

        id = bannerObject.el.id;

        // lastTimeStamp = new Date().getTime();
        // adding the banner container to storage
        if (!banners[id]) {
          banners[id] = {
            c: bannerObject.el,
            px: bannerObject.pixels,
            px_un: bannerObject.pixels_undetermined,
            px_nv: bannerObject.pixels_nonviewable,
            cb: bannerObject.callback,
            io: useObserver
          };
        }

        // enabling anyway
        on();
        if (useObserver) {
          o(bannerObject.el);
        }
        C(!0);
      }

      // C &ndash; check viewability of banner with t, timeout after loading

      function C(t) {
        for (var id in banners) {
          if (banners[id] && !G(id)) {
            CL(id);
          } else if (
            banners[id] &&
            getVA(banners[id].c) >= 50 &&
            hasFocus() &&
            !banners[id].t
          ) {
            (function (_id) {
              banners[_id].t = setTimeout(function () {
                try {
                  P(_id);
                } catch (e) {}
              }, 1E3);
            })(id);
          } else if (
            banners[id] &&
            getVA(banners[id].c) < 50
          ) {
            if (banners[id].t) {
              clearTimeout(banners[id].t);
              delete banners[id].t;
            }
          } else if (banners[id] && !hasFocus()) {
            if (banners[id].t) {
              clearTimeout(banners[id].t);
              delete banners[id].t;
              clearTimeout(tm);
              t = false;
            }
          } else if (!banners[id]) {
            CL(id);
          }
        }

        if (t) {
          clearTimeout(tm);
          tm = setTimeout(
            function () {
              C(!0);
            },
            useGeom ? 3e2 : 10e3
          );
        }
      }

      // CL &ndash; Clear timers and stop listeners

      function CL(id, onlyTM, noCount) {
        if (id && banners[id]) {
          clearTimeout(banners[id].t);
          banners[id].t = null;
          if (!onlyTM) {
            if (banners[id].io && observer) {
              observer.unobserve(banners[id].c);
            }

            if (!noCount && !s(banners[id].c, counted)) {
              tr(banners[id].px_nv);
              banners[id].c[counted] = true;
            }
            banners[id].c = null;
            delete banners[id];
          }
          return;
        }
        clearTimeout(tm);
        tm = null;
        for (var id in banners) {
          if (banners[id].t) {
            CL(id, !0);
          }
        }
      }

      function Clear(bannersArray) {
        if (bannersArray && bannersArray.length >= 0) {
          //clear banners from array
          var k = bannersArray.length - 1;
          var id;
          for (; k >= 0; k--) {
            id = bannersArray[k].el.id;
            if (id && banners[id]) {
              // clear but don't count nonviewable
              CL(id, !1, !0);
            }
          }
        } else {
          for (var id in banners) {
            //clear all
            CL(id);
          }
        }
      }

      // P &ndash; pixel to send
      function P(id, obj, cnt) {
        if (!G(id)) {
          CL(id);
          // banner removed
          return;
        }

        if (banners[id]) {
          obj = banners[id].c;
        } else {
          return;
        }

        if (!hasFocus()) {
          CL(id, !0);
          return;
        } else if (getVA(obj) < 50) {
          CL(id, !0);
          return;
        }

        for (cnt = banners[id].px.length - 1; cnt >= 0; cnt--) {
          new Image().src = banners[id].px[cnt];
        }
        // set counted flag - skip in next collect loops
        obj[counted] = true;
        //try fire callback
        var cb = banners[id].cb;
        if (cb && typeof cb === "function") {
          try {
            cb();
          } catch (e) {}
        }
        // remove banner from storage of inspectable items
        CL(id);
        // turn listeners off if banners are not present
        if (!l(banners)) off();
      }

      function hasFocus() {
        if (HP) focused = !d[HP];
        else if (!VE && typeof d.hasFocus === "function")
          focused = d.hasFocus();
        return focused;
      }

      function getVA(obj, source) {
        if (obj.id && banners[obj.id] && banners[obj.id].io) {
          return banners[obj.id].v || 0;
        }

        var percent = getGeometryViewableArea(obj).percent;

        return percent;
      }

      /** LISTENERS SWITCHERS **/
      function on() {
        if (enabled) return;
        if (useGeom) {
          ev(w, "resize", onWindowResize);
          ev(w, "scroll", onWindowScroll);
        }
        if (useObserver) {
          observer = new IntersectionObserver(h, {
            threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
          });
        }
        if (VE) ev(d, VE, onVisibilityChange);
        else {
          ev(w, "blur", onFocusOut);
          ev(w, "focus", onFocusIn);
        }
        ev(w, "unload", onUnload);
        enabled = true;
      }

      function off() {
        rm(w, "unload", onUnload);
        rm(w, "resize", onWindowResize);
        rm(w, "scroll", onWindowScroll);
        if (VE) rm(d, VE, onVisibilityChange);
        rm(w, "focus", onFocusIn);
        rm(w, "blur", onFocusOut);
        if (observer) {
          observer.disconnect();
          observer = null;
        }
        clearTimeout(tm);
        enabled = false;
      }

      /** INTERSECTION OBSERVER UTILS **/
      function o(e) {
        observer && observer.observe(e);
      }

      function h(changes) {
        changes.forEach(function (changeRecord) {
          var element = changeRecord.target;
          var id = element.id;

          if (id && banners[id]) {
            banners[id].v = Math.round(
              changeRecord.intersectionRatio * 100
            );
          }
        });
        C();
      }

      /** UTILS **/
      // G - get element by ID;
      function G(E) {
        return d.getElementById(E);
      }
      // ev - EVent to handle
      function ev(elem, eventName, callback) {
        elem.addEventListener
          ? elem.addEventListener(eventName, callback, !1)
          : elem.attachEvent &&
            elem.attachEvent("on" + eventName, callback);
      }

      function rm(elem, eventName, callback) {
        elem.removeEventListener
          ? elem.removeEventListener(eventName, callback, !1)
          : elem.detachEvent &&
            elem.detachEvent("on" + eventName, callback);
      }
      // obj length
      function l(obj) {
        var s = 0,
          key;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) s++;
        }
        return s;
      }
      //elem state
      function s(elem, state) {
        return !(typeof elem[state] == undefined || elem[state] !== true);
      }
      //track
      function tr(pixels) {
        if (pixels && pixels.length) {
          for (cnt = pixels.length - 1; cnt >= 0; cnt--) {
            new Image().src = pixels[cnt];
          }
        }
      }
      function serveType() {
        try {
          if (window === window.top) {
            return "ON_PAGE";
          }

          var currentWindow = window;

          while (currentWindow !== currentWindow.parent) {
            if (
              currentWindow.document.domain !==
              currentWindow.parent.document.domain
            ) {
              return "XD_FRAME";
            }
            currentWindow = currentWindow.parent;
          }

          return "S_FRAME";
        } catch (e) {}

        return "XD_FRAME";
      }

      // geometry viewability
      function getGeometryViewableArea(element, contextWindow) {
        try {
          var rect = element.getBoundingClientRect();
          var area = getArea(rect);
          var currentWindow = window;

          contextWindow = contextWindow || window.top;

          while (currentWindow !== contextWindow) {
            // 1) get current frame coordinates inside its parent
            // 2) get element coordinates relative to parent
            // 3) get visible element coordinates relative to parent
            var currentRect = currentWindow.frameElement.getBoundingClientRect();

            rect = getRR(rect, currentRect);
            rect.left = Math.max(currentRect.left, rect.left);
            rect.right = Math.min(currentRect.right, rect.right);
            rect.top = Math.max(currentRect.top, rect.top);
            rect.bottom = Math.min(currentRect.bottom, rect.bottom);

            if (rect.right < rect.left) {
              rect.right = rect.left;
            }
            if (rect.bottom < rect.top) {
              rect.bottom = rect.top;
            }

            currentWindow = currentWindow.parent;
          }
          rect = getRVA(rect, contextWindow);

          var viewableArea = getArea(rect);

          rect.percent = (viewableArea / area) * 100;

          return rect;
        } catch (e) {
          return { left: 0, right: 0, top: 0, bottom: 0, percent: 0 };
        }
      }

      function getArea(rect) {
        return (rect.right - rect.left) * (rect.bottom - rect.top);
      }
      // relative rect
      function getRR(rect, contextRect) {
        return {
          left: rect.left + contextRect.left,
          right: rect.right + contextRect.left,
          top: rect.top + contextRect.top,
          bottom: rect.bottom + contextRect.top,
        };
      }
      // relative viewable area
      function getRVA(rect, contextWindow) {
        var result = {};
        var contextSize = getVS(contextWindow);

        result.left = Math.max(0, rect.left);
        result.right = Math.min(contextSize.width, rect.right);
        result.top = Math.max(0, rect.top);
        result.bottom = Math.min(contextSize.height, rect.bottom);

        return result;
      }
      // viewport size
      function getVS(w) {
        var viewPortSize = {
          width: Infinity,
          height: Infinity,
        };
        var d = w.document;

        if (!isNaN(d.body.clientWidth) && d.body.clientWidth > 0) {
          viewPortSize.width = d.body.clientWidth;
        }
        if (!isNaN(d.body.clientHeight) && d.body.clientHeight > 0) {
          viewPortSize.height = d.body.clientHeight;
        }
        if (
          !!d.documentElement &&
          !!d.documentElement.clientWidth &&
          !isNaN(d.documentElement.clientWidth)
        ) {
          viewPortSize.width = d.documentElement.clientWidth;
        }
        if (
          !!d.documentElement &&
          !!d.documentElement.clientHeight &&
          !isNaN(d.documentElement.clientHeight)
        ) {
          viewPortSize.height = d.documentElement.clientHeight;
        }
        if (!!w.innerWidth && !isNaN(w.innerWidth)) {
          viewPortSize.width = Math.min(viewPortSize.width, w.innerWidth);
        }
        if (!!w.innerHeight && !isNaN(w.innerHeight)) {
          viewPortSize.height = Math.min(
            viewPortSize.height,
            w.innerHeight
          );
        }

        return viewPortSize;
      }

      /** PUBLIC INTERFACE **/

      return {
        I: I,
        // debug
        // , banners: banners
        v: 1,
      };
    })();
  })(window, document, 'mailru')
  }catch (e) {}
</script>


<script>
  (function(prefix){
    try{
      
      function getAdsContainers() {
  			var ADS_CLASS = prefix + '-visibility-check',
  				ADS_COUNTER_CLASS = ADS_CLASS + '-counter',
  				ADS_CALLBACK_CLASS = ADS_CLASS + '-callback',
  				COUNTER_ATTR = 'data-counter',
  				COUNTER_ATTR_UNDETERMINED = COUNTER_ATTR + '-un',
  				COUNTER_ATTR_NONVIEWABLE = COUNTER_ATTR + '-nv',
  				CALLBACK_ATTR = 'data-callback',
  				OBSERVER_ATTR = 'data-observer',
  				containers = [],
  				countables = [],
  				i, k, counters, _counter, _observer;
   
  			containers = getByClass(document, ADS_CLASS);
  			for (i = containers.length - 1; i >= 0; i--) {
  				var counters = getByClass(containers[i], ADS_COUNTER_CLASS, 'span');
  				_counter = containers[i].getAttribute(COUNTER_ATTR);
  				_observer = containers[i].hasAttribute(OBSERVER_ATTR);
  				countables[i] = {
  					el: containers[i],
  					pixels: [],
  					pixels_undetermined: [],
  					pixels_nonviewable: [],
  					observer: _observer
  				};
  				if (_counter) countables[i].pixels.push(_counter);
  				for (k = counters.length - 1; k >= 0; k--) {
  					if (counters[k].parentNode === countables[i].el) {
              _counter = counters[k].getAttribute(COUNTER_ATTR);
              if (_counter) {
                countables[i].pixels.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_UNDETERMINED);
              if (_counter) {
                countables[i].pixels_undetermined.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_NONVIEWABLE);
              if (_counter) {
                countables[i].pixels_nonviewable.push(_counter);
              }
            }
  				}
  				var callback = getByClass(containers[i], ADS_CALLBACK_CLASS, 'span');
  				if (callback[0]) {
  				  var _callback = callback[0].getAttribute(CALLBACK_ATTR);
  				  if (_callback && window.RB_CALLBACKS && window.RB_CALLBACKS[_callback]) {
  				    countables[i].callback = window.RB_CALLBACKS[_callback];
  				  }
  				}
  				if (!countables[i].pixels.length) countables.splice(i, 1);
  			}
   
  			return countables;
  		}
   
  		function getByClass(parent, childClassName, tagName) {
  			if (parent.getElementsByClassName) {
  				return parent.getElementsByClassName(childClassName);
  			} else if (parent.querySelectorAll) {
   
  				return parent.querySelectorAll('.' + childClassName);
  			} else {
  				var els = [];
  				var tmp = parent.getElementsByTagName(tagName ? tagName : "*");
  				var regex = new RegExp("(^|\s)" + childClassName + "(\s|$)");
  				for (var i = 0; i < tmp.length; i++) {
  					if (regex.test(tmp[i].className)) {
  						els.push(tmp[i]);
  					}
  				}
  				return els;
  			}
  		}
   
  		RB.I(getAdsContainers());
      
    }catch(e){}
  }('mailru'))
</script>

<div id="yandex_ad_R-142108-737_264384324" style="border-radius: 12px;clip-path: inset(1px round 12px);position: relative;overflow:hidden;width: 240px;height: 400px;"></div>
<script type="text/javascript">
	(function(w, d, n, s, t) {
	  var countryId = '188';
	  var provinceId = '70';
	  var regionId = '5506';

	  var timeStart = +new Date();

	  var firstDirectRender = true;
	  var fallbackInvoked = false;
	  var fallbackTimeout = null;

	  var fallbackType = {
		  FORCE: 'force',
		  UNSUPPORT: 'unsupport',
		  TIMEOUT: 'timeout',
		  ERROR: 'error',
		  EMPTY: 'empty'
	  };

		if (!w.Map || (w.attachEvent && !w.addEventListener)) { // "bad" IE
		  setTimeout(function() {
		    fallback(fallbackType.UNSUPPORT);
		  }, 0);
		  return;
		}

		var fallbackDelay = 2500;

	  if (fallbackDelay) {
  	  fallbackTimeout = setTimeout(function() {
  	    fallback(fallbackType.TIMEOUT);
  	  }, fallbackDelay);
	  } else {
		  setTimeout(function() {
		    fallback(fallbackType.FORCE);
		  }, 0);
	    return;
	  }

  	function getBrowserLabel() {
  		var browser = 'unk';
  		var ua = navigator.userAgent;

  		if (ua.indexOf('Opera') !== -1 || ua.indexOf('OPR') !== -1) {
  			browser = 'opr';
  		} else if (ua.indexOf('Edge') !== -1) {
  			browser = 'edg';
  		} else if (ua.indexOf('Chrome') !== -1) {
  			browser = 'chr';
  		} else if (ua.indexOf('Safari') !== -1) {
  			browser = 'sfr';
  		} else if (ua.indexOf('Firefox') !== -1) {
  			browser = 'ff';
  		} else if ((ua.indexOf('MSIE') !== -1) || (!!document.documentMode === true)) {
  			browser = 'ie';
  		}

  		return browser;
  	}

    function sendXray(t, i, dwh) {
      if (w.xray) {
        try {
          if (xray.sendImmediately) {
            xray.sendImmediately(t, {i: i, dwh: dwh});
          } else {
            xray.send(t, {i: i, dwh: dwh});
          }
        } catch (e) {}
      }
    }

    function selectScore(duration) {
      var durationType = 'fail';
      if (duration < 100) {
        durationType = 'instantly1';
      } else if (duration < 300) {
        durationType = 'instantly2';
      } else if (duration < 500) {
        durationType = 'instantly3';
      } else if (duration < 1000) {
        durationType = 'very-fast';
      } else if (duration < 2000) {
        durationType = 'fast';
      } else if (duration < 4000) {
        durationType = 'moderate';
      } else if (duration < 8000) {
        durationType = 'slightly-slow';
      } else if (duration < 15000) {
        durationType = 'slow';
      } else if (duration < 30000) {
        durationType = 'very-slow';
      }
      return durationType;
    }
    
    function logContextLibLoadDurationType(duration) {
      var durationType = selectScore(duration);
      var i = {load: 1};
      i['load_' + durationType] = 1;

      sendXray('adman-ya-cntx', i, {
        country_id: countryId,
        province_id: provinceId,
        region_id: regionId,
        duration_type: durationType
      });
    }

    function logDirectRenderDurationType(duration) {
      if (w.__TS && __TS > 1670862466560) {
        var durationType = selectScore(duration);
        var i = {direct: 1};
        i['direct_' + durationType] = 1;
  
        sendXray('adman-time', i, {
          country_id: countryId,
          province_id: provinceId,
          region_id: regionId,
          duration_type: durationType
        });
      }
    }

    function logRender(fallbackType) {

      function createMetrics(duration, durationType, withScore) {
        var browser = getBrowserLabel();
        var slotId = '948435';
        var iprefix = 'b-' + browser + '_s-' + slotId;

        var idata = {};

        idata[iprefix + '_render'] = duration;
        
        var webPerfExpId = '';
        if (webPerfExpId) {
          idata[webPerfExpId + '_' + iprefix + '_render'] = duration;
        }

        if (withScore) {
          idata['render'] = duration;
          idata[iprefix + '_sc-' + durationType] = duration;
        } else {
          if (fallbackType) {
            idata[iprefix + '_' + fallbackType] = duration;

            if ('1') {
              idata[iprefix + '_mrk'] = duration;
              idata[iprefix + '_' + fallbackType + '_mrk'] = duration;
            } else {
              idata[iprefix + '_trg'] = duration;
              idata[iprefix + '_' + fallbackType + '_trg'] = duration;

              if ('') {
                idata[iprefix + '_trg_hi'] = duration;
                idata[iprefix + '_' + fallbackType + '_trg_hi'] = duration;
              } else {
                idata[iprefix + '_trg_lo'] = duration;
                idata[iprefix + '_' + fallbackType + '_trg_lo'] = duration;
              }
            }
          } else {
            idata[iprefix + '_direct'] = duration;

            if ('') {
              idata[iprefix + '_direct_hi'] = duration;
            } else {
              idata[iprefix + '_direct_lo'] = duration;
            }
          }
        }

        return idata;
      }

      var duration = new Date() - timeStart;
      var durationType = selectScore(duration);
      sendXray('adman-time', createMetrics(duration, durationType), null);

      if (w._timers && 'ready_app' in _timers && w._now) {
        if (w.__TS && __TS > 1670579404891) {
          var durationFirstRender = Math.round(_timers.ready_app + _now());
          var durationFirstRenderType = selectScore(durationFirstRender);
          sendXray('adman-frtime', createMetrics(durationFirstRender, durationFirstRenderType, true), {
            country_id: countryId,
            province_id: provinceId,
            region_id: regionId,
            duration_type: durationFirstRenderType
          });
        }

        delete _timers.ready_app;
      }
      
      if (0 && w.Ya && Ya.codeVer && !w.logYaContextVersion) {
        w.logYaContextVersion = true;
        sendXray('adman-ya-cntx', 'hit', {
          ya_version: Ya.codeVer
        });
      }
    }

	  function fallback(type) {
		  if (fallbackInvoked) return;
		  clearTimeout(fallbackTimeout);
		  fallbackInvoked = true;

      var trgB = document.getElementById("trg-b-119817434-264384324");
      var trgYa = document.getElementById("yandex_ad_R-142108-737_264384324");

      if (trgYa) {
        trgYa.style.display = 'none';
      }

      if (trgB) {
        if (trgB.getAttribute("data-hide-264384324") === "hide-banner") {
          trgB.removeAttribute("data-hide-264384324");
        }
  			trgB.style.display = "block";
  			var container = document.querySelectorAll('#trg-b-119817434-264384324 .trg-v-banner');
        if (container.length) { container = container[0] || null; }
        if (container && container.playVideoCheck && typeof container.playVideoCheck === 'function') {
            container.playVideoCheck();
        }
        new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qHbAdRayAAAAEGhH0Pohnh36ClN_jGHIJUmTIX05K4jIo1sLThWy11BmXQ0bCjaB2bOsLp1xR0aoT8ubCvF5x0RHIy6yCaLXEWjOdYPTiFq1R8OF9nLjSpD9PCWgDgBFUqwxWSlIJiA9Q0hlynG6ZZj9k-j-S9kWw08jHVO6BIsMsdSbuURc4vOcDVJTPflLebQgbFi1PmwkpZXOn28C-i0QRc6DAfIacnyUAA6j1zaud6uYW9mcY9xndP84NA3gET5ZkciJw_v7.gif";
        RB.I({
            el: trgB,
            pixels:  ['https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qLhxfy6yAAAAmPmtga2VPyrJhnDKO3RdJVYxvZoMWUmwJCLThgC6-t9dcdjMlexF25M8thak3xEbx2s8Wg1e5mLnexbqG38JV72f_3GAg_RQ0wH8QXcOlMx298nDs8vLdZWxdTwcSmqFaKnlrssOBOVcGKENwrteUiAb6JTRvX94UbITdyhMYScgksdkjiOTWuTXVux-exNxJyVe2aDSPGDGoGeom9FWjV87F1C9mIGiJazyLAmfUE_lWnE_Vg-gW-gTZYApHV55.gif']
        });

        if (type === fallbackType.TIMEOUT) {
          new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qLZj1CayAAAAzgb9SI_u4ywpP-yx75mQSX4uKL0fs9aSvMDB_44XUyWsq4KS2gy_8UrYxLgEBFctq98lfdrDadOdbXgGKMTG2Dk24TohHHoh8nR1VHY9LOxoFtmN8GE90Snog7yHYOymeL32oF0uzBI00hBmB3RacMaRavM1r8O0FCxYBauLTaHnkj78uTcArQvGSIabRbBTv0s2lergYkxJw_iMzCZUmQxFNks0i4v_CnXZjVSazyv3Owe3BX3PZhYMLOjY9zUL.gif";
        } else if (type === fallbackType.ERROR) {
          new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qKmUjT6yAAAAdxYago4qA-Rz4rule-BPdAr2mQPc86z4MU34vOKZ5TrHshK0k4_fplJfZ6-ziSXr_sSQPwXukPS4RGv77s9MpPlsKo8PrVwg6V9UWcKmR8rn-xsSUqbhriU-zgxTHGBecjpcICBpVxYkLWLoiMZ_XZr-jjdazi9eN7ivrErB-39Lbt4TNhwkFrLNxQq1HFGgy6TDXpUUH3XmHk46HyvAOz1Fe1N73lbeDrH2qGAZ_Ftbf9v8aaeIVzBsiE7eCfLZ.gif";
        } else if (type === fallbackType.EMPTY) {
          new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qI4kNzCyAAAAkWeMjY-LYYRHTlw8a_zQZrSeJd08-vMnEX0JkMQj3fbXOeNcEhyPqlQzlzgRrz-GgsqKTTa8jKGGsprvoj94wkhUpuBLTsMZgOMHrjXzxel0fdwJNUp23jvgvKIcu5p5BCpjP1TtRzK-XYt1PAGiAPCyfoUf22SVd0uRlMf-WjkoMig3C414rN7nxu-FJXPjZgWuQs2qF7__1w-ZBR5M7goRKhAUsrrPHyT3eRuanptZaFjiXum3D9JW8roljSTh.gif";
        }

        logRender(type);
      }
		}

		// Stat utils
    function getAreaRatio(container, selector) {
        var elems = container.querySelectorAll(selector);
        var totalArea = 0;

        for (var i = 0, l = elems.length; i < l; i++) {
            var el = elems[i];
            var w = (el.clientWidth === 0) ? 0 : (el.width || el.clientWidth);
            var h = (el.clientHeight === 0) ? 0 : (el.height || el.clientHeight);
            totalArea += w * h;
        }

        if (totalArea === 0) {
            return totalArea;
        }

        var containerArea = container.clientWidth * container.clientHeight;
        return totalArea / containerArea;
    }

		function onContextReady() {
		  var contextReadyStartTime = +new Date();
		  
			Ya.Context.AdvManager.render({
				blockId: "R-142108-737",
				renderTo: "yandex_ad_R-142108-737_264384324",
				statId: "492",
				async: true,
				disableHighlight: true,
				onRender: function (data) {
				  if (fallbackInvoked) return;
				  clearTimeout(fallbackTimeout);
				  
				  var yaNode = document.getElementById("yandex_ad_R-142108-737_264384324");
				  
				  if (data && data.refresh) {
            new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qFi1nyKyAAAANb5RGb4TWYJ80u0lJqCafvbka2g8Z9ZibsmwrcMU8GqEWWu6RCggBozPL6vdZXVdi3QR_hq2q4xCi2v7G6_EaNNoKcNbkdBI43wt-mxLPc5OW8v2GOmdtdy77qEMadVyRo-JJ5zOlmrCXA8vJF8BRRHRN28qrzUGYCExsBjsYOc5gKNTy7LzkxB1YhLVb31em5vFoORDP1Ed1jT20y80JK8nOreTS4A9PJfZAmdCTkF4mkK5UNwBWloI40f6ShOC.gif";
          } else {
            new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qOV2ISqyAAAAJTg-_nSKWemC0n5mhCv6YqGAH2ciZ4NXc0qQNwxfHtQfZ9NqUOHSh2_gTF_okipdcr8A8lzdaqZfdHYF_emurUTPrRbGaq6FQtdfA6HwXmW6lw9s8QTMnpVJUwVtX79MwNr4uhmi4K321YENZLXauoGPh-ZOHfRgTi5FNhprjuyLrddcHc1wulSpY8zEhA-K7WiUNsnGPTYPrUhLhTprusra0ClmxH5CQYAyZ8w7lsbx8GwX6uwn9z36wF2XttYk.gif";

            if (yaNode && firstDirectRender) {
              firstDirectRender = false;

              RB.I({
                el: yaNode,
                pixels: ['https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qFzDRGqyAAAAS6FG6yJwvyd_VhWIinflPfuu9Z-ZuUrPQ5_nEOsGNf0GMNaYxACQnc-jjiP5wpCNVubChPBjCpCyS-PYylhA-ylKgQR4pkfN_WotoiJAiiNiJ-Kcmv_gijnnTaO3AKtFgA9vsn8xIJXjb_DspuBw3PZ56lWak6zKRn9qMutdTeUpJWAMm0seF3aFKQY7X1f9I_TCeAoUvQiLVSC7tq722A-gz6yldpyqYyAY-AA6lo4IrfDf4XjBU2t0oedkTtul.gif']
              });

              logRender();
              
              logDirectRenderDurationType(new Date().getTime() - contextReadyStartTime);
            }
          }
          
          if (yaNode && getAreaRatio(yaNode, 'img') > 0.3) {
            new Image().src = "https://rs.mail.ru/pixel/AAD99gFU8mPU8JjfxTnIbmqUemosi9UUH1fAprl_s-vEgrW-QRGxWvC0L32u2QEng8FCbsRYyUE0ZWyNuMywyQ9zx2zAwvhQ2-s2GbqOGKWwRSYaPp3So96Rg2Z-1hTWMwbsRSHxl2aYF0K-qPM5dy83X9Ms3_yVTW5DoYALCuoZNhM_qGbJmR6yAAAAxsEE4kwL8aq8FUZZ77AIiJ7jpCkyCkjM7fgYsTYmn8rEmjISoZRduT5Y2H8TYo-BqCOlRLh2PhMfEJ8t8s0nfetAyAfE3UtDOOHgRbqtIIUMeIStUlIRJOnQklWt0PqU7hcNZkLuOpBZcmICGTuMcA7VpiI0MfyJc__-mLqbkfxAdNK9KKVb9poLpiPX9jzgNHGERImQ4uNutSiS1HbdiSvktfG4UxeQ4Lsk1wyKzSsj87_LZBCv5wiCRieXok22.gif";
          }
				}
			}, function () {
			  if (firstDirectRender) {
			    fallback(fallbackType.EMPTY);
			  }
			});
		}
    
    w.YA_MAILRU_OK = true;
    
  	if (w.Ya && Ya.Context && Ya.Context.AdvManager && Ya.Context.AdvManager.render) {
  		onContextReady();
  	} else {
  		w[n] = w[n] || [];
  		w[n].push(onContextReady);
  
  		t = d.getElementsByTagName("script")[0];
  		s = d.createElement("script");
  		s.type = "text/javascript";
  		s.src = "//yandex.ru/ads/system/context.js";
  		s.async = true;
  		s.onerror = function () {
        fallback(fallbackType.ERROR);
      };
  		s.onload = function () {
        logContextLibLoadDurationType(new Date().getTime() - timeStart);
      };
  		t.parentNode.insertBefore(s, t);
  	}
	})(this, this.document, "yandexContextAsyncCallbacks");
</script>
<!--RB-JSON:[
    {
        nodeId: 'yandex_ad_R-142108-737_264384324',
        source: 'direct',
        is_expensive: 'False',format: 'teaser',
        count: 3,
        bannerId: '119817434',
        fallback: [
            {
                nodeId: 'trg-b-119817434-264384324',
                source: 'marketing',
                format: 'banner',
                count: 1
                }
        ]
    }
]-->





 </div>


<script>
  (function(prefix){
    try{
      
      function getAdsContainers() {
  			var ADS_CLASS = prefix + '-visibility-check',
  				ADS_COUNTER_CLASS = ADS_CLASS + '-counter',
  				ADS_CALLBACK_CLASS = ADS_CLASS + '-callback',
  				COUNTER_ATTR = 'data-counter',
  				COUNTER_ATTR_UNDETERMINED = COUNTER_ATTR + '-un',
  				COUNTER_ATTR_NONVIEWABLE = COUNTER_ATTR + '-nv',
  				CALLBACK_ATTR = 'data-callback',
  				OBSERVER_ATTR = 'data-observer',
  				containers = [],
  				countables = [],
  				i, k, counters, _counter, _observer;
   
  			containers = getByClass(document, ADS_CLASS);
  			for (i = containers.length - 1; i >= 0; i--) {
  				var counters = getByClass(containers[i], ADS_COUNTER_CLASS, 'span');
  				_counter = containers[i].getAttribute(COUNTER_ATTR);
  				_observer = containers[i].hasAttribute(OBSERVER_ATTR);
  				countables[i] = {
  					el: containers[i],
  					pixels: [],
  					pixels_undetermined: [],
  					pixels_nonviewable: [],
  					observer: _observer
  				};
  				if (_counter) countables[i].pixels.push(_counter);
  				for (k = counters.length - 1; k >= 0; k--) {
  					if (counters[k].parentNode === countables[i].el) {
              _counter = counters[k].getAttribute(COUNTER_ATTR);
              if (_counter) {
                countables[i].pixels.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_UNDETERMINED);
              if (_counter) {
                countables[i].pixels_undetermined.push(_counter);
              }
              _counter = counters[k].getAttribute(COUNTER_ATTR_NONVIEWABLE);
              if (_counter) {
                countables[i].pixels_nonviewable.push(_counter);
              }
            }
  				}
  				var callback = getByClass(containers[i], ADS_CALLBACK_CLASS, 'span');
  				if (callback[0]) {
  				  var _callback = callback[0].getAttribute(CALLBACK_ATTR);
  				  if (_callback && window.RB_CALLBACKS && window.RB_CALLBACKS[_callback]) {
  				    countables[i].callback = window.RB_CALLBACKS[_callback];
  				  }
  				}
  				if (!countables[i].pixels.length) countables.splice(i, 1);
  			}
   
  			return countables;
  		}
   
  		function getByClass(parent, childClassName, tagName) {
  			if (parent.getElementsByClassName) {
  				return parent.getElementsByClassName(childClassName);
  			} else if (parent.querySelectorAll) {
   
  				return parent.querySelectorAll('.' + childClassName);
  			} else {
  				var els = [];
  				var tmp = parent.getElementsByTagName(tagName ? tagName : "*");
  				var regex = new RegExp("(^|\s)" + childClassName + "(\s|$)");
  				for (var i = 0; i < tmp.length; i++) {
  					if (regex.test(tmp[i].className)) {
  						els.push(tmp[i]);
  					}
  				}
  				return els;
  			}
  		}
   
  		RB.I(getAdsContainers());
      
    }catch(e){}
  }('mailru'))
</script>
